def vaultSecrets = [
  [
    path: 'kv/time-machine/lab',
    secretValues: [
      [vaultKey: "DJANGO_SECRET_KEY"],
      [vaultKey: "DJANGO_SUPERUSER_EMAIL"],
      [vaultKey: "DJANGO_SUPERUSER_PASSWORD"],
      [vaultKey: "DJANGO_SUPERUSER_USERNAME"],
      [vaultKey: "POSTGRESQL_PASSWORD"],
      [vaultKey: "POSTGRESQL_USERNAME"]
    ]
  ]
]

def APP_SLUG = "time-machine"
def APP_NAME = "Time Machine"
def HOMEPAGE_GROUP = "Background Services"
def HOMEPAGE_ICON = ""
def PORT = "8000"
def DATABASE_NAME = "timemachine"
def DATABASE_HOST = "db"
def DATABASE_PORT = "5432"
def DJANGO_SETTINGS_MODULE = "time_machine.settings"
def PYTHON_ENV = "lab"

def envs = [
  "PYTHON_ENV=${PYTHON_ENV}",
  "APP_SLUG=${APP_SLUG}",
  "APP_NAME=${APP_NAME}",
  "HOMEPAGE_GROUP=${HOMEPAGE_GROUP}",
  "HOMEPAGE_ICON=${HOMEPAGE_ICON}",
  "PORT=${PORT}",
  "DATABASE_HOST=${DATABASE_HOST}",
  "DATABASE_PORT=${DATABASE_PORT}",
  "POSTGRESQL_DATABASE=${DATABASE_NAME}"
]

pipeline {
  agent any

  stages {
    stage("Verify Tooling") {
      steps {
        withVault([vaultSecrets: vaultSecrets]) {
          withEnv(envs) {
            sh '''
              echo "Verifying tooling..."
              docker info
              docker version
              docker compose version
              docker compose --project-name ${APP_SLUG} --file deploy/lab/docker-compose.yml config
            '''
          }
        }
      }
    }

    stage("Build") {
      steps {
        withVault([vaultSecrets: vaultSecrets]) {
          withEnv(envs) {
            sh '''
              echo "Building..."
              docker compose --project-name ${APP_SLUG} --file deploy/lab/docker-compose.yml build --no-cache
            '''
          }
        }
      }
    }

    stage("Deploy") {
      steps {
        withVault([vaultSecrets: vaultSecrets]) {
          withEnv(envs) {
            sh '''
              echo "Deploying..."
              docker compose --project-name ${APP_SLUG} --file deploy/lab/docker-compose.yml up --detach --remove-orphans
            '''
          }
        }
      }
    }

    stage("Cleanup") {
      steps {
        withVault([vaultSecrets: vaultSecrets]) {
          withEnv(envs) {
            sh '''
              echo "Cleaning up..."
              docker image prune --force
            '''
          }
        }
      }
    }
  }
}
